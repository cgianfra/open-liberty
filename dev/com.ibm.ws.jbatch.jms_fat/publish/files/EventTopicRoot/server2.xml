<server description="BatchJmsSingleServer_fat">

    <include location="../fatTestPorts.xml" />

	 <!-- Enable features -->
    <featureManager>
        <feature>batchManagement-1.0</feature>
    	<feature>wasJmsServer-1.0</feature>
    	<feature>wasJmsClient-2.0</feature>
    	<feature>osgiConsole-1.0</feature>
    	<feature>jaxrs-2.0</feature>
		<feature>mdb-3.2</feature>
		<feature>cdi-1.2</feature>
		<feature>jsonp-1.0</feature>
    </featureManager>

    <jndiEntry jndiName="serverName" value="${wlp.server.name}"/>

    <batchPersistence jobStoreRef="BatchDatabaseStore" />

    <databaseStore id="BatchDatabaseStore" dataSourceRef="batchDB" schema="JBATCH" tablePrefix="" />

	<library id="DerbyLib">
	    <file name="${shared.resource.dir}/derby/derby.jar"/>
	</library>
	
	<!-- The following configures in-memory Derby.  For Derby on disk, which is needed if the database
   	is required beyond a single server start, configure the databaseName with a file location such as:
   	databaseName="${shared.config.dir}/data/derbydb" -->

	<dataSource id="batchDB" jndiName="jdbc/batch">
		<jdbcDriver libraryRef="DerbyLib" />
		<properties.derby.embedded databaseName="memory:BATCHDB"
			loginTimeout="360s"
			createDatabase="create" user="user" password="pass" />
	</dataSource>				  
	
	 	<!--  Both use the same DB -->
	<dataSource id="BonusPayoutNoTran" jndiName="jdbc/BonusPayoutNoTranDS" type="javax.sql.ConnectionPoolDataSource" transactional="false">
		<jdbcDriver libraryRef="DerbyLib" />
        <properties.derby.embedded databaseName="memory:BonusPayoutDB"
			createDatabase="create" user="user" password="pass" />
	</dataSource>

	<dataSource id="BonusPayout" jndiName="jdbc/BonusPayoutDS" type="javax.sql.XADataSource">
		<jdbcDriver libraryRef="DerbyLib" />
        <properties.derby.embedded databaseName="memory:BonusPayoutDB"
			createDatabase="create" user="user" password="pass" />
	</dataSource>
	

    <keyStore id="defaultKeyStore" location="${server.config.dir}/resources/security/key.p12" type="PKCS12" password="{xor}EzY9Oi0rJg==" />
	    <!--keyStore id="defaultKeyStore" password="Liberty"/-->
    <basicRegistry id="basic" realm="ibm/api">
        <user name="bob" password="bobpwd"/>
        <user name="jane" password="janepwd"/>
    </basicRegistry>
	
    <administrator-role><user>bob</user></administrator-role>

	<!-- Everyone is a batch admin for non security related tests -->
	<authorization-roles id="com.ibm.ws.batch">
		<security-role name="batchAdmin">
			<user name="bob" />
			<user name="jane" />
		</security-role>
	</authorization-roles>
	
	
	<batchJmsDispatcher queueRef="batchJobSubmissionQueue" connectionFactoryRef="batchConnectionFactory"/>
	<batchJmsExecutor activationSpecRef="batchActivationSpec" queueRef="batchJobSubmissionQueue" replyConnectionFactoryRef="batchConnectionFactory"/>
	<batchJmsEvents  connectionFactoryRef="batchConnectionFactory" topicRoot="Fred" />
	
	<messagingEngine>
		<queue id="batchLibertyQueue" forceReliability="ReliablePersistent"></queue>
		<!-- publish batch events to default topic space -->		
	</messagingEngine>
	
	<!-- batch jms executor jms listener
		note that message selector need space around the equal sign-->
	<jmsActivationSpec id="batchActivationSpec" >
		<properties.wasJms messageSelector="com_ibm_ws_batch_applicationName = 'SimpleBatchJob' OR com_ibm_ws_batch_applicationName = 'BonusPayout'"
		                   destinationRef="batchJobSubmissionQueue"
		                   destinationType="javax.jms.Queue">
		</properties.wasJms>
	</jmsActivationSpec>
	
	 <!-- batch dispatcher and batch events can use the same connection factory -->
	<jmsConnectionFactory id="batchConnectionFactory" jndiName="jms/batch/connectionFactory">
		<properties.wasJms></properties.wasJms>	
	</jmsConnectionFactory>
		
	<jmsQueue id="batchJobSubmissionQueue" jndiName="jms/batch/jobSubmissionQueue">
		<properties.wasJms deliveryMode="Persistent" queueName="batchLibertyQueue" readAhead="AsConnection" timeToLive="0"></properties.wasJms>
	</jmsQueue>
	
	<!--  This is used by the test app MDB activation spec to filter for topics in the topic tree.
	xxx//. match 0 or more level 
	xxx//* match 1 or more level
	xxx// is not valid
	-->
	<jmsTopic id="batchJobTopic" jndiName="jms/batch/batchJobTopic">
		<properties.wasJms topicName="Fred//."/>
	</jmsTopic>
	
	<!-- test mdb application to receive job events -->
	<jmsActivationSpec id="jmsmdb/jmsmdb/TopicSpaceMDB">
		<properties.wasJms
			destinationRef="batchJobTopic" destinationType="javax.jms.Topic" />
	</jmsActivationSpec>
	
	<!--  This is used by a test app MDB activation spec to filter for job log event topics. -->
	<jmsTopic id="ExecutionTopic" jndiName="jms/batch/ExecutionTopic">
		<properties.wasJms topicName="Fred//jobs//execution//*" />
	</jmsTopic>
	
	<!-- test mdb application to receive job log events and help with FAT tests -->
	<jmsActivationSpec id="JobLogEventsMDB/JobLogEventsSubscriber">
		<properties.wasJms
			destinationRef="ExecutionTopic" destinationType="javax.jms.Topic" />
	</jmsActivationSpec>
	
	<!-- test mdb application to create job log directories from job log events-->
	<!-- 
	<jmsActivationSpec id="JobLogEventsLogCreatorMDB/JobLogEventsSubscriber">
		<properties.wasJms
			destinationRef="ExecutionTopic" destinationType="javax.jms.Topic" />
	</jmsActivationSpec>
	-->
</server>
